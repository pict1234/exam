from bitstring import BitArray

def booth(m,r):

	x=8
	y=8
	totallength = x+y+1

	mA = BitArray(int = m , length = totallength)
	rA = BitArray(int = r , length = totallength)
	A =  mA << (y+1)
	S =  BitArray(int = -m , length = totallength) << (y+1)
	P =  BitArray(int = r , length = y)
	P.prepend(BitArray(int = 0 , length = x))
	P = P << 1 

	print "Initial values"
	print "",A.bin
	print "",S.bin
	print "",P.bin

	for i in range(1,y+1):
		if P[-2:] == '0b01':
			P = BitArray(int = P.int + A.int, length = totallength)
			print "P +  A:", P.bin
		elif P[-2:] == '0b10':
			P = BitArray(int = P.int + S.int, length = totallength)
			print "P +  S:", P.bin
		P = arith_shift_right(P, 1)
		print "P >> 1:", P.bin
	P = arith_shift_right(P, 1)
	print "P >> 1:", P.bin
	return P.int


def arith_shift_right(x,amt):

	l = x.len
	x = BitArray(int=( x.int>>amt),length = l)#ha function parat practice
	return x

